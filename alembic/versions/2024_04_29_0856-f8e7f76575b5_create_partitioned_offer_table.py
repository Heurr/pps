"""create partitioned offer table

Revision ID: f8e7f76575b5
Revises: ea0707fff91f
Create Date: 2024-04-29 08:56:21.152874

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "f8e7f76575b5"
down_revision = "ea0707fff91f"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    conn = op.get_bind()
    country_code_type = postgresql.ENUM(name="countrycode", create_type=False)
    country_code_type.create(conn, checkfirst=True)
    currency_code_type = postgresql.ENUM(name="currencycode", create_type=False)
    currency_code_type.create(conn, checkfirst=True)

    op.create_table(
        "offers",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("product_id", sa.UUID(), nullable=False),
        sa.Column("shop_id", sa.UUID(), nullable=False),
        sa.Column(
            "country_code",
            country_code_type,
            nullable=False,
        ),
        sa.Column(
            "currency_code",
            currency_code_type,
            nullable=False,
        ),
        sa.Column("price", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column("version", sa.BigInteger(), nullable=False),
        sa.Column("in_stock", sa.Boolean(), nullable=True),
        sa.Column(
            "availability_version", sa.BigInteger(), server_default="-1", nullable=False
        ),
        sa.Column("buyable", sa.Boolean(), nullable=True),
        sa.Column(
            "buyable_version", sa.BigInteger(), server_default="-1", nullable=False
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("product_id", "id", name=op.f("pk_offers")),
        postgresql_partition_by="HASH (product_id, id)",
    )
    op.create_index(op.f("ix_offers_id"), "offers", ["id"], unique=False)

    for i in range(20):
        op.execute(
            f"""
                   CREATE TABLE offers_{i:02d} PARTITION OF offers
                   FOR VALUES WITH (MODULUS 20, REMAINDER {i})
                   WITH (FILLFACTOR = 70);
               """
        )


def downgrade() -> None:
    for i in range(20):
        op.execute(f"DROP TABLE IF EXISTS offers_{i:02d};")
    op.drop_table("offers")
